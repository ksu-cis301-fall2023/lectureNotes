HW 6 due Tues October 10

Exam 2 will be Thurs October 12
    - more information will be posted by the end of the week
    - we'll spend some time reviewing on Tuesday

//////////////////////////////////////////////////

HW 5 comments:


4. {x : x ∈ ℤ, x ≥ -5} ∪ {x : x ∈ ℤ, x ≤ 7}

5. Suppose A ⋃ B = A for two sets A and B.
What does that tell us about A and B?


6. Suppose A ⋂ B = A for two sets A and B.
What does that tell us about A and B?


7 (a). If A ⋃ C = B ⋃ C, must A = B?



7 (b). If A ⋂ C = B ⋂ C, must A = B?



//////////////////////////////////////////////////

Today:

- More with for all introduction
- Deduction rules with the existential quantifier

//////////////////////////////////////////////////

Review with for all introduction:


(forallReview.logika)
∀ x P(x) |- ∀ y P(y)


//////////////////////////////////////////////////

Suppose we have these predicates in the domain of food:

P(x): x is pizza
Q(x): x has pepperoni
K(x): x has mushrooms

Given the premises:
All pizza has pepperoni or mushrooms
All food is pizza

We want to prove:
All food has pepperoni or mushrooms



1) Translate each statement to predicate logic

All pizza has pepperoni or mushrooms

All food is pizza

All food has pepperoni or mushrooms



2) Prove the sequent (in the file forallTrans.logika)

////////////////////////////////////////

Idea behind there exists-introduction (∃i):

        P(v)
∃i: --------------
       ∃ x P(x)

//v is some individual



If we know that: Human(Socrates)

Then we can conclude that: ∃ x (Human(x))



If we find ONE individual in a domain where a statement holds

...then THERE EXISTS an individual in the domain where the
    statement holds


//////////////////////////////////////////

Rule syntax:


Human(Socrates) |- ∃ x (Human(x))
{
    1. Human(Socrates)              premise
    2. ∃ x (Human(x))               ∃i 1 Socrates
}


/////////////////////////////////////////

Bigger example (exists1.logika):

∀ x (Human(x)->Mortal(x)), Human(Socrates) |- ∃ x (Mortal(x))



/////////////////////////////////////////


Idea behind there exists-elimination (∃e):

                { a P(a)    assume
     ∃ x P(x),    ... Q }
∃e: ------------------------------
                  Q

//think of a as an alias for the individual the ∃ statement held for
//a is "fresh" (never used before)


If we know there is at least one individual where some statement holds

...then we can introduce a (or whatever) as an ALIAS for that
    individual in a subproof

    ...whatever conclusion we reach in the subproof must be true
        overall, since a was an EXISTING individual



Structure of the subproof:

3. ∃ x P(x)
4. {
    5. a P(a)       assume //plug into your ∃ statement
    ...
    10. Q
}
11. Q               ∃e 3 4


--> Think of ∃e like OR-elimination
    ∃ x P(x) means: P(n1) V P(n2) V ... V P(nk)


**If you have an ∃ statement as a claim, it is a good strategy
to start with a block where you create an alias (e.g. a)
and plug it into your ∃ statement, as above

Use ∃e in the SAME situations you would use Ve

///////////////////////////////

Examples:

(exists2.logika)
∀ x (Human(x) → Mortal(x)), ∃ x (Human(x)) ⊢ ∃ x (Mortal(x))


(exists3.logika)
∃ x (P(x)) ⊢ ∃ y (P(y))


(exists4.logika)
¬(∃ x (P(x) ^ Q(x))) ⊢ ∀ x (P(x) → ¬Q(x))

    P(x): student x attends K-State
    Q(x): student x attends KU

    --> what is this argument saying?



////////////////////////////

Proof tactics for predicate logic

- see if you can do anything right away with the premises
    - ^ elimination
    - ->, and the LHS, do ->e
    - ∀, individual, ∀e

- look at top-level operator for what you are trying to prove
    trying to prove ∀ x (P(x)) ?

    trying to prove ∃ x (P(x)):

    trying to prove ->

    trying to prove ¬(something)

    trying to prove an V

    when you are in a subproof?


Unsure what to do?
    - Do you have an V statement available?

    - Do you have an ∃ statement available?

    - Is negation involved, but not creating ¬(something)?


/////////////////////////////////////////

Proving DeMorgan's laws

//demorgan1.logika
∀ x ¬P(x)       equivalent to       ¬(∃ x P(x))

//demorgan2.logika
∃ x ¬P(x)       equivalent to       ¬(∀ x P(x))

////////////////////////////////////////

Next time:

- a bit more with predicate logic proofs
- review for exam 2