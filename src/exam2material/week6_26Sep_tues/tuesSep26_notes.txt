HW 4 due tonight (make sure your link has the correct format)


#6: p → q       equivalent to       ¬p ∨ q

p → q ⊢ ¬p ∨ q

try pbc. Assume ¬(¬p ∨ q)
    want: _|_
    if we can get ¬p ∨ q, would have _|_
    try to prove ¬p, use ¬i and assume p



#7: ¬(p → q)    equivalent to       p ∧ ¬q

¬(p → q)  ⊢ p ∧ ¬q

try pbc again. Assume ¬(p ∧ ¬q)
    want: _|_
    try to contradict with premise.
    use ->i to get p->q, which would contradict.



HW 5 will be posted later today

///////////////////

bigger2.logika - finish from last time

//////////////////

New today:

- Soundness and completeness of propositional logic
- Sets - notation, definitions, operations
- Intro to quantifiers

///////////////////

SOUNDNESS and COMPLETENESS of propositional logic



SOUNDNESS: everything that is provable is actually true

How does this relate to our proof system?
anytime I can prove something with natural deduction, it would be the case
that anytime all the premises were true in a truth table then the
conclusion was also true.


p
q
p ^ q


COMPLETENESS: everything that is true is provable

How does this relate to our proof system?

anytime I can show an argument is valid with truth tables, it is possible
to prove that argument with natural deduction



--> what would it mean if a proof system was unsound?

--> what would it mean if a proof system was incomplete?



Propositional logic is both SOUND and COMPLETE.


Proving the sequent:

    P1, P2, ..., Pn ⊢ q

Is equivalent to using truth tables to show that whenever

    P1, P2, ..., Pn

are true, then q is also true

//////////////////////////////////////

Sets.

{1,1,3,5,7} = {1,3,5,7} = {7,3,1,5}


- A set is an unodered collection of elements


    x ∈ A       means that x is an element in set A

    x ∉ A       means that x is not an element in set A



Example: A = {1,4,7,11,20}

    1 ∈ A
    2 ∉ A



- Common sets in math:

    ℕ = natural numbers (positive integers) {1, 2, 3, ..}

    ℤ = set of all integers {...-2,-1,0,1,2,...}

    ℚ = rationals p/q (how to define p and q?)
        where p ∈ ℤ ^ q ∈ ℤ ^ q != 0

    ℝ = real

    ℂ = complex (real + imaginary)

    ∅ = empty/null set


////////////////////////////////////

Set builder notation.

{variable : conditions}


{x : x ∈ ℕ, 5 ≤ x ≤ 10}

{5,6,7,8,9,10}


{x : x is prime}

{2, 3, 5, ...}



{d : d is a weekday}

{Monday, Tuesday, Wed, Thurs, Fri}


{v : v is a vowel}



{k : k is a letter in "abracadabra"}

{a, b, r, c, d}


{x : x = 2k,  k ∈ ℕ}

{2, 4, 6, 8, ...}


{n : n = k^2, k ∈ Z}

{0, 1, 4, 9, ...}


{n : n = 3a + 1, a ∈ ℕ, 1 ≤ a ≤ 4}

{4, 7, 10, 13}


///////////////////////////////////////

Describe these sets in set builder notation


{5,10,15}

{x : x = 5k, k ∈ ℕ, 1 ≤ k ≤ 3}


{CIS 115, CIS 200, CIS 300, CIS 301}

{x : x is a CIS class in the preprofessional program}


{2,4,8,16,32}

{x : x = 2^k, k ∈ ℕ, 1 ≤ k ≤ 5}


///////////////////////////////////////

Set union, ⋃

The union of the sets A and B, written A ⋃ B, is the set
of all elements that are in either A or B or both.


How could we express in set builder notation?

A ⋃ B = {x : x ∈ A ⋁ x ∈ B}


//////////////////////////////////////
⋃ ⋂ ⋁ ⋀ ∈ ∉
///////////////////////////////////////

Set intersection, ⋂

The intersection of the sets A and B, written A ⋂ B, is the set
of all elements that are in both A and B.


How could we express in set builder notation?

A ⋂ B = {x : x ∈ A ⋀ x ∈ B}

///////////////////////////////////////

Set difference, -

The difference between the sets A and B, written A - B, is the set
of all elements that are in A but are not in B.


How could we express in set builder notation?

A - B = {x : x ∈ A ⋀ x ∉ B}

//////////////////////////////////////
⋃ ⋂ ⋁ ⋀ ∈ ∉
///////////////////////////////////////

A = {1,3,7,10,11,12}

B = {2,3,4,5,6,7}


Find:

A ⋃ B = {1,2,3,4,5,6,7,10,11,12}

A ⋂ B = {3, 7}

A - B = {1, 10, 11, 12}

B - A = {2,4,5,6}


//////////////////

Subset - A is a subset of B, written A ⊆ B, if
    all elements in A are also in B.

(We say A ⊂ B if A is a subset of B but A ≠ B.)




Example:

A = {1,3,4}

B = {1,3,5,8}

--> is A a subset of B?

no, it has a 4 that is not in B


A = {8,1,3}

B = {1,3,5,8}

--> is A a subset of B? yes

//////////////////////////////////


Quantifiers - helps describe all or some elements in a set

    ∀ - universal quantifier, read as "for all"

    ∃ - existential quantifier, read as "there exists"



∀ x ∈ A ...     "For all elements x in set A..."

∃ x ∈ A ...     "There exists at least one element x in set A..."





∀ x ∈ ℝ (x^2 ≥ 0)       //what is this saying? why is it true?

the square of every real number is greater than or equal to 0


∀ x ∈ ℝ (x^2 > 0)       //Is this true? NO!

Not true when x = 0, which is a real number.


∃ x ∈ ℤ (x^2 == 1)       //what is this saying? why is it true?

There is an integer whose square is 1
Yes, true when x = 1

∃ x ∈ ℤ ∀ y ∈ ℤ (x + y == 1)       //what is this saying? Is it true?

There is an integer x where for every integer y, x + y = 1.

no.

∀ x ∈ ℤ ∃ y ∈ ℤ (x + y == 1)
For every integer x, there exists an integer y such that x + y == 1.

yes!
/////////////////////////////////////

How could we define whether set A is a subset of set B using quantifiers?

A ⊆ B means ??

∀ x, (x ∈ A -> x ∈ B)


How could we define whether set A equals set B using quantifiers?





∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

//////////////////////////////////////

Properties about sets.

Distributive laws

    A ⋃ (B ⋂ C) = (A ⋃ B) ⋂ (A ⋃ C)

    A ⋂ (B ⋃ C) = (A ⋂ B) ⋃ (A ⋂ C)

similar to a ⋁ (b ⋀ c) = (a ⋁ b) ⋀ (a ⋁ c)


How would we prove this?

A ⋃ (B ⋂ C) = (A ⋃ B) ⋂ (A ⋃ C).

Idea: let x ∈ A ⋃ (B ⋂ C) . Show that x ∈ (A ⋃ B) ⋂ (A ⋃ C)
Then let  x ∈ (A ⋃ B) ⋂ (A ⋃ C), show that x ∈ A ⋃ (B ⋂ C)


//////////////////////////////////////

What do we know if A - B = A?

A ⋂ B must be empty



What do we know if A - B = B - A?

When A = B. Then A-B = B-A = ∅


∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

//////////////////////////////////////

Next time:
- more proofs with sets
- limitations of propositional logic
- intro to predicate logic