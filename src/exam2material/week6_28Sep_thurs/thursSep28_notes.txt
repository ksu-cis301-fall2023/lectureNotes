HW 5 due Tues Oct 3

////////////////////////////////////

Today:

- more with sets
- limitations of propositional logic
- begin predicate logic

///////////////////////////////////

∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

///////////////////////////////////

Quick review:

A ⋃ B = {x : x ∈ A ⋁ x ∈ B}

A ⋂ B = {x : x ∈ A ⋀ x ∈ B}

A - B = {x : x ∈ A ⋀ x ∉ B}

///////////////////////////////////

Quantifiers - helps describe all or some elements in a set

    ∀ - universal quantifier, read as "for all"

    ∃ - existential quantifier, read as "there exists"



∀ x ∈ A ...     "For all elements x in set A..."

∃ x ∈ A ...     "There exists at least one x in set A..."

//////////////////////////////////////

Set builder notation: {x : P(x)}

where P(x) is a statement (a predicate) involving x

The set is all such x where P(x) is true


--> more with predicates later on today

//////////////////////////////////////

A = {x : P(x)}

How to prove a ∈ A, for some element a and some set A?



//////////////////////////////////////

Example:

A = {x : x ∈ ℕ ⋀ x^2 ≥ 25 }




Is 2 in A? Is -6? Is 10?

//////////////////////////////////////

How to prove A ⊆ B?
   ∀ k (k ∈ A → k ∈ B)


--> How would we prove an implies statement with natural deduction?


//////////////////////////////////////

Example:

    A = {x : x = 4n, n ∈ ℤ}
    B = {x : x = 2n, n ∈ ℤ}

Prove A ⊆ B.




--> What if B = {x : x = 2n-6, n ∈ ℤ}?




//////////////////////////////////////

How would we show A = B?



//////////////////////////////////////

Sketch proof of a distributive law on sets:

A ⋃ (B ⋂ C) = (A ⋃ B) ⋂ (A ⋃ C)




//////////////////////////////////////

Limitations of propositional logic:

All humans are mortal.
Socrates is human.
Therefore, Socrates is mortal.


p: All humans are mortal
q: Socrates is a human
r: Socrates is mortal

p, q ⊢ r

How would we prove this in propositional logic?




///////////////

Predicate logic:

Instead of propositions, we will make claims about
individuals in a domain (a set)


These claims will involve predicates and quantifiers



//////////////////

Predicates.


A predicate is a boolean function that represents whether
    an individual has a particular property




Example:

    Domain: ℤ
    P(x): whether x > 0

    What is the value of P(1)?

    What is the value of P(0)?



Example:

    Domain: {x : x is a student at K-State}
    C(x): whether x is in CIS 301

    Bob is taking: CIS 300, ECE 241, MATH 221, ENGL 200
    Jill is taking: CIS 301, MATH 510, HIST 251, MUSIC 170


    What is the value of C(Bob)?

    What is the value of C(Jill)?

    What is the value of C(Bob) ⋀ C(Jill)?


////////////////

Quantifiers and predicates

Domain: {strawberry, blueberry, banana, orange, grapefruit, apple}

Berry(x): x is a berry
Citrus(x): x is a citrus fruit
Peel(x): x has a peel (that needs to be removed before eating)
Seeds(x): x contains inedible seeds
Bite(x): f is bite-sized

Write each statement in English. Is each one true or false?

∀ x (Berry(x))

    --> how could we express the same statement in our domain
    WITHOUT a quantifier?





∃ x (Citrus(x) ⋀ Seeds(x))

    --> how could we express the same statement in our domain
    WITHOUT a quantifier?





∀ x (Berry(x) ⋀ Bite(x))




∀ x (Berry(x) → Bite(x))




¬(∀ x Peel(x))

Can you think of another way to write the same thing?



¬(∀ x (Seeds(x) → Citrus(x)))

Can you think of another way to write the same thing?


∀ x ¬Peel(x)




¬(∃ x Berry(x))



¬(∃ x Peel(x) ⋀ Citrus(x))



∃ x ¬(Peel(x) ⋀ Citrus(x))



¬(∀ x Berry(x))




∃ x (Citrus(x) → Berry(x))





/////////////////

Predicates in math.

Can use boolean functions to represent properties in math, like this:

Domain: ℕ
Big(x): whether x > 100

∃ x Big(x)



But more commonly list the property itself, like this:

    ∃ x (x > 100)

Or, sometimes also list the domain in the statement:

    ∃ x ∈ ℕ : (x > 100)

///////////////////////////////

Domain: ℤ


What do these mean in English? Are they true?


∀ n ∃ m (n^2 < m)



∀ x ∃ y (x == y^2)




Write the following in predicate logic:
----------------------------------------

The sum of two negative integers is negative

Domain: ℤ




The difference of two positive integers is not necessarily positive







∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

//////////////////////////////

Writing specifications using predicate logic

Domain: {x : x is a user input number}




Want to specify: individual "min" is the minimum user input element



Want to specify that the array nums is sorted


Want to specify that every element in nums has been updated
    to be the absolute value of the original element

    (use "nums_in" to denote the original array, and "nums"
    to mean the final array)


//////////////////////////////


Next time:
- Classifying predicate logic statements in a domain
    (tautology, contingent, contradictory)
- Determining if arguments in predicate logic are valid
- Equivalent statements in predicate logic
- Begin proofs in predicate logic