HW 5 due Tues Oct 3


HW 6 will be posted after class, due Tues Oct 10

Exam 2 will be Thurs Oct 12

////////////////////////////////////

Today:
- more with predicates and translations
- DeMorgan's laws for quantifiers

////////////////////////////////////

∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

////////////////////////////////////

   Reminder (maybe our domain is people):

        ∃ x student(x)

        ¬(∃ x student(x))

        ∃ x ¬student(x)

        ∀ x student(x)

        ¬(∀ x student(x))

        ∀ x ¬student(x)

////////////////////////////////////

Predicates in math.

Can use boolean functions to represent properties in math, like this:

Domain: ℕ
Big(x): whether x > 100

∃ x Big(x)



But more commonly list the property itself, like this:

    ∃ x (x > 100)

Or, sometimes also list the domain in the statement:

    ∃ x ∈ ℕ : (x > 100)

///////////////////////////////

Domain: ℤ


What do these mean in English? Are they true?


∀ n ∃ m (n^2 < m)



∀ x ∃ y (x == y^2)



--> does the domain matter?

////////////////////////////////////

Write the following in predicate logic:
----------------------------------------

The sum of two negative integers is negative

Domain: ℤ




The difference of two positive integers is not necessarily positive


/////////////////////////////

Writing specifications using predicate logic

Domain: {x : x is a user input number}




Want to specify: individual "min" is the minimum user input element



Want to specify that the array nums is sorted


Want to specify that every element in nums has been updated
    to be the absolute value of the original element

    (use "nums_in" to denote the original array, and "nums"
    to mean the final array)


//////////////////////////////

Equivalence: DeMorgan's law (part 1).

¬(∃ x P(x))         ∀ x (¬P(x))

How might we read these two statements?



We will prove this soon...but what is the idea?

suppose our domain is k1 through kn


¬(∃ x P(x)) is  equivalent to...?
∀ x (¬P(x)) is equivalent to...?



///////////////////////////////////////

Equivalence: DeMorgan's law (part 2).

¬(∀ x P(x))       ∃ x (¬P(x))

How might we read these two statements?

¬(∀ x P(x)) is equivalent to...?
∃ x (¬P(x)) is equivalent to...?

What is the idea of this proof?

//////////////////////////////////////

Apply DeMorgan's laws: example

Domain: students
Predicates:
    in5th(x): student x is in 5th grade
    wonPrize(x): student x won a prize
    friendsWith(x, y): student x is friends with student y
        (not necessarily reciprocal)


1) Express the statement in predicate logic

2) Negate the statement so no negation is outside a quantifier
or outside a statement with logical connectives

    Reminder:
        p → q is equivalent to: ¬p ⋁ q
        ¬(p ⋀ q) is equivalent to: ¬p ⋁ ¬q
        ¬(p ⋁ q) is equivalent to: ¬p ⋀ ¬q
        ¬(p → q) is equivalent to: ¬(¬p ⋁ q) = p ^ ¬q

///

    in5th(x): student x is in 5th grade
    wonPrize(x): student x won a prize
    friendsWith(x, y): student x is friends with student y
        (not necessarily reciprocal)

A 5th grader won a prize

Translation:


Negation:




///

All prize-winners were 5th graders

Translation:

Negation: try on your own


///

All 5th graders have a friend

Translation:

Negation:


///

All 5th graders are friends with each other

Translation:


Negation: try on your own


///

A 5th grader is friends with all prize winners

Translation:


Negation:



////////////////////////////////////

Arguments in predicate logic

Set of premises
Conclusion

Argument is VALID: regardless of domain,
    whenever all the premises are true,
    then the conclusion is also true

Argument is INVALID: we can find a domain where
    all the premises are true but the conclusion is false



Examples -- are the following arguments valid?

///

Premises: ∀ x (P(x) → Q(x)), ∃ x P(x)
Conclusion: ∃ x Q(x)

Valid or not?


///

Premises: ∀ x P(x)
Conclusion: ∃ x P(x)

Valid or not?

///

Premises: ∀ x (¬P(x) ⋁ ¬D(x)), D(a)
Conclusion: ¬P(a)

Valid or not?

/////////////////////////////////

Proofs in predicate logic.

- want to formalize the kind of reasoning from above and
    from showing equivalence
- want valid inference rules that do NOT depend on the domain
    (there is no way to do the equivalent of a "truth table proof"
        in predicate logic...there are infinitely many domains!)

- add inference rules on quantifiers to our natural deduction rules


////////////////////////////////


For-all elimination (∀e):

       ∀ x P(x)
∀e: --------------
       P(v)

//...for some specific individual v



Idea:

- if we know that a statement is true for ALL individuals in
our domain


...then what would we know about a specific individual
in that domain?

///////////////////////////////

Syntax:

∀ x Human(x) ⊢ Human(Socrates)
{
    1. ∀ x Human(x)                 premise
    2. Human(Socrates)              ∀e 1 Socrates
}


///////////////////////////////

Example (forall1.logika)


∀ x (inCIS301(x) → takenCIS200(x)), inCIS301(bob) ⊢ takenCIS200(bob)


//////////////////////////////

Next rule will be for all introduction.

First: consider these two statements:


∀ x (P(x) ⋀ Q(x))           (∀ x P(x)) ⋀ (∀ x Q(x))


are they equivalent?

how would we defend our position?


//////////////////////////////////


For-all introduction (∀i):

       { a
        ... P(a) }
∀i: --------------
       ∀ x P(x)

//a is a "fresh" individual (never used before)


Idea:

- We know a statement holds for some arbitrary individual
- That individual could have been anything!

...what can we say about that statement for all individuals?




Structure involves a subproof:

4. {
    5. a            //no justification here,
                    //could be any (fresh) individual name
    ...
    10. P(a)        //or some combination statement with
                    //our individual, a
}
11. ∀ x P(x)        Ai 4


///////////////////////////////////

Example:

Prove these statements are equivalent:

∀ x (P(x) ⋀ Q(x))           (∀ x P(x)) ⋀ (∀ x Q(x))


///////////////////////////////////

Are these statements equivalent?

∀ x (P(x) ⋁ Q(x))           (∀ x P(x)) ⋁ (∀ x Q(x))



///////////////////////////////////

Next time:
- proofs and equivalences with the existential quantifier