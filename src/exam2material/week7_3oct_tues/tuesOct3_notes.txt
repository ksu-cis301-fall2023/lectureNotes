HW 5 due Tues Oct 3


HW 6 will be posted after class, due Tues Oct 10

Exam 2 will be Thurs Oct 12

////////////////////////////////////

Today:
- more with predicates and translations
- DeMorgan's laws for quantifiers
- Introduction to rules for quantifiers in natural deduction

////////////////////////////////////

∀ ∃     ∈ ∉     ∅ ⋂ ⋃ ⊂ ⊆   ⋀ ⋁ ¬ →     ℕ ℤ     ≠ ≤ ≥

////////////////////////////////////

   Reminder (maybe our domain is people):

        ∃ x student(x) - there is a student

        ¬(∃ x student(x)) - there does not exist a student

        ∃ x ¬student(x) - there is someone who is not a student

        ∀ x student(x) - everyone is a student

        ¬(∀ x student(x)) - not everyone is a student

        ∀ x ¬student(x) - everyone is not a student

////////////////////////////////////

Domain: ℤ


What do these mean in English? Are they true?


∀ n ∃ m (n^2 < m) - the square of every integer is less than some other integer
    true


∀ x ∃ y (x == y^2)
    every integer is the square of some other integer
    no - not every integer is a perfect square

--> does the domain matter?

////////////////////////////////////

Write the following in predicate logic:
----------------------------------------

The sum of two negative integers is negative

Domain: ℤ

∀ x ∀ y (x < 0 ^ y < 0 -> x+y < 0)
true


The difference of two positive integers is not necessarily positive

(I can find a pair of positive integers whose difference is not positive)

∃ x ∃ y (x > 0 ^ y > 0 ^ x-y <= 0)

true. 2-4 = -2

/////////////////////////////

Writing specifications using predicate logic

Domain: {x : x is a user input number}

Want to specify: individual "min" is the minimum user input element

(∀ x (min <= x)) ^ (∃ x (x == min))


Want to specify that the array nums is sorted

each number is <= the number after it

∀ x: (0..<nums.length-1) nums[i] <= nums[i+1]


//////////////////////////////

Equivalence: DeMorgan's law (part 1).

¬(∃ x P(x))         ∀ x (¬P(x))

How might we read these two statements?

there does not exist an x where P is true
for all x, P is not true

We will prove this soon...but what is the idea?

suppose our domain is k1 through kn


¬(∃ x P(x)) is  equivalent to...? ¬(P(k1) V P(k2) V .. V P(kn))
∀ x (¬P(x)) is equivalent to...? ¬P(k1) ^ ¬P(k2) ^ ... ^ ¬P(kn)



///////////////////////////////////////

Equivalence: DeMorgan's law (part 2).

¬(∀ x P(x))       ∃ x (¬P(x))

How might we read these two statements?
not all elements are P-ish
there is an element that is not P-ish

¬(∀ x P(x)) is equivalent to...?
∃ x (¬P(x)) is equivalent to...?

What is the idea of this proof? same idea, but other DeMorgan's law

//////////////////////////////////////

Apply DeMorgan's laws: example

Domain: students
Predicates:
    in5th(x): student x is in 5th grade
    wonPrize(x): student x won a prize
    friendsWith(x, y): student x is friends with student y
        (not necessarily reciprocal)


1) Express the statement in predicate logic

2) Negate the statement so no negation is outside a quantifier
or outside a statement with logical connectives

    Reminder:
        p → q is equivalent to: ¬p ⋁ q
        ¬(p ⋀ q) is equivalent to: ¬p ⋁ ¬q
        ¬(p ⋁ q) is equivalent to: ¬p ⋀ ¬q
        ¬(p → q) is equivalent to: ¬(¬p ⋁ q) = p ^ ¬q

///
Domain: students
    in5th(x): student x is in 5th grade
    wonPrize(x): student x won a prize
    friendsWith(x, y): student x is friends with student y

A 5th grader won a prize

Translation:
    ∃ x (in5th(x) ^ wonPrize(x))

Negation:
¬(∃ x (in5th(x) ^ wonPrize(x)))
∀ x ¬(in5th(x) ^ wonPrize(x))
∀ x (¬in5th(x) V ¬wonPrize(x))
∀ x (in5th(x) -> ¬wonPrize(x))

All 5th graders did not win a prize

p → q is equivalent to: ¬p ⋁ q

///

All prize-winners were 5th graders

Translation: ∀ x (wonPrize(x) -> in5th(x))

Negation:


¬(∀ x (wonPrize(x) -> in5th(x)))
∃ x ¬(wonPrize(x) -> in5th(x))
∃ x ¬(¬wonPrize(x) V in5th(x))
∃ x (wonPrize(x) ^ ¬in5th(x))

There is a student who won a prize and is not a 5th grader

p → q is equivalent to: ¬p ⋁ q

///

All 5th graders have a friend

(skipped - try on your own)

Translation:
Negation:


///

All 5th graders are friends with each other

(skipped - try on your own)

Translation:
Negation:


///

A 5th grader is friends with all prize winners

Translation:
∃ x ∀ y (in5th(x) ^ wonPrize(y) -> friendsWith(x, y))


Negation:
¬(∃ x ∀ y (in5th(x) ^ wonPrize(y) -> friendsWith(x, y)))
∀ x ∃ y ¬(in5th(x) ^ wonPrize(y) -> friendsWith(x, y))
∀ x ∃ y ¬(¬(in5th(x) ^ wonPrize(y)) V friendsWith(x, y))
∀ x ∃ y ¬((¬in5th(x) V ¬wonPrize(y)) V friendsWith(x, y))
∀ x ∃ y (¬(¬in5th(x) V ¬wonPrize(y)) ^ ¬friendsWith(x, y))
∀ x ∃ y (in5th(x) ^ wonPrize(y) ^ ¬friendsWith(x, y))

All 5th graders have a prize-winner that they are not friends with

(I will check this - edit: it looks OK)

p → q is equivalent to: ¬p ⋁ q

////////////////////////////////////

Arguments in predicate logic

Set of premises
Conclusion

Argument is VALID: regardless of domain,
    whenever all the premises are true,
    then the conclusion is also true

Argument is INVALID: we can find a domain where
    all the premises are true but the conclusion is false



Examples -- are the following arguments valid?

///

Premises: ∀ x (P(x) → Q(x)), ∃ x P(x)
Conclusion: ∃ x Q(x)

Valid or not? true


///

Premises: ∀ x P(x)
Conclusion: ∃ x P(x)

Valid or not? NO! Does not hold when the domain is empty.


/////////////////////////////////

Proofs in predicate logic.

- want to formalize the kind of reasoning from above and
    from showing equivalence
- want valid inference rules that do NOT depend on the domain
    (there is no way to do the equivalent of a "truth table proof"
        in predicate logic...there are infinitely many domains!)

- add inference rules on quantifiers to our natural deduction rules


////////////////////////////////


For-all elimination (∀e):

       ∀ x P(x)
∀e: --------------
       P(v)

//...for some specific individual v



Idea:

- if we know that a statement is true for ALL individuals in
our domain


...then what would we know about a specific individual
in that domain?

///////////////////////////////

Syntax:

∀ x Human(x) ⊢ Human(Socrates)
{
    1. ∀ x Human(x)                 premise
    2. Human(Socrates)              ∀e 1 Socrates
}


///////////////////////////////

Example (forall1.logika)


∀ x (inCIS301(x) → takenCIS200(x)), inCIS301(bob) ⊢ takenCIS200(bob)


//////////////////////////////

Next rule will be for all introduction.

First: consider these two statements:


∀ x (P(x) ⋀ Q(x))           (∀ x P(x)) ⋀ (∀ x Q(x))


are they equivalent?

how would we defend our position?


//////////////////////////////////


For-all introduction (∀i):

       { a
        ... P(a) }
∀i: --------------
       ∀ x P(x)

//a is a "fresh" individual (never used before)


Idea:

- We know a statement holds for some arbitrary individual
- That individual could have been anything!

...what can we say about that statement for all individuals?




Structure involves a subproof:

4. {
    5. a            //no justification here,
                    //could be any (fresh) individual name
    ...
    10. P(a)        //or some combination statement with
                    //our individual, a
}
11. ∀ x P(x)        Ai 4


///////////////////////////////////

Example:

Prove these statements are equivalent:

∀ x (P(x) ⋀ Q(x))           (∀ x P(x)) ⋀ (∀ x Q(x))


///////////////////////////////////

Are these statements equivalent?

∀ x (P(x) ⋁ Q(x))           (∀ x P(x)) ⋁ (∀ x Q(x))



///////////////////////////////////

Next time:
- proofs and equivalences with the existential quantifier