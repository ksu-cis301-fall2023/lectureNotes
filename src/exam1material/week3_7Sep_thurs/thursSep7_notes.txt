HW 3 due Tuesday, September 12

    Reminder: correct submission format

    repo/tree/digital fingerprint

    starting on HW 3, there will be a 5 pt deduction for
    submissions in the wrong format


Exam 1 is Thursday, September 14
    take full time
    closed notes
    similar to HW problems
    will post practice exam

//////////////////////////////////////////

Today:

- OR rules in natural deduction
- Using natural deduction to prove two statements are equivalent
- Equivalent if-statements
- If time, implies rules in natural deduction


///////////////////////////////////////////

Review:

- we want to prove that a conclusion logically follows from
    a set of premises

- could do this with truth tables
    ...but it is very tedious
    (Reminder: how did it work?)


We use *natural deduction* with a minimal set of rules
    to prove the same things



Natural deduction proof syntax.


    premises ⊢ conclusion
    {
        1. claim                justification
        2. claim                justification
        ...
        n. conclusion           justification
    }

premises ⊢ conclusion --> what is this called? sequent


claim: what is this?


justificaton: what goes here?


///////////////////////////////////////////

Rules from Tuesday:

premise
∧i lhsLine rhsLine
∧e1 lineWithAnd
∧e2 lineWithAnd

/////////////////////////////////////////////

Prove that ∧ is commutative:

p ∧ q ⊢ q ∧ p
{
    1. p ∧ q                premise
    2. p                    ∧e1 1
    3. q                    ∧e2 1
    4. q ∧ p                ∧i 3 2
}




////////////////////////////////////////////

OR introduction

          P                      Q
 ∨i1 : ---------        ∨i2 : ---------
        P ∨ Q                   P ∨ Q


Why does this make sense from truth tables?



Syntax:

 ∨i1 lineWithLeft
 ∨i2 lineWithRight

///////////////////////////////////////////

Example:

p ∧ q ⊢ p ∨ q
{
    1. p ∧ q            premise
    2. q                ∧e2 1
    3. p ∨ q            ∨i2 2
}

Or, could have done:

p ∧ q ⊢ p ∨ q
{
    1. p ∧ q            premise
    2. p                ∧e1 1
    3. p ∨ q            ∨i1 2
}


///////////////////////////////////////////

OR elimination


Idea:
- If an OR statement is true, what do we know?

at least one of the sides of the OR is true on its own



- What if we can reach the same conclusion no matter which side
    of the OR is true?





Rule summary:


      P ∨ Q   {P assume    {Q assume
                ... R}       ... R}
∨e : ---------------------------------
                    R



How does this relate to programming?






if (condition) {
    some result
}
else {
    some result
}

--> what do we know is true here?


///////////////////////////////

Syntax for using ∨e:

a. P ∨ Q            (some justification)
b. {
    P               assume
    ...
    R               (some justification)
}
c. {
    Q               assume
    ...
    R               (some justification)
}
d. R                ∨e a b c


////////////////////////////////

Example: prove that OR is commutative (or1.logika)

p ∨ q ⊢ q ∨ p
{
    1. p ∨ q                premise
    2. {
        3. p                assume
        4. q ∨ p            ∨i2 3
    }
    5. {
        6. q                assume
        7. q ∨ p            ∨i1 6
    }
    8. q ∨ p                ∨e 1 2 5
}



////////////////////////////////

Do you think we could prove:

p ∨ q ⊢ p ∧ q

why is this invalid?

truth assignment where premises are true but the conclusion is false

p = T
q = F


--> what happens?

////////////////////////////////

Proving equivalence.

--> how do we prove two statements are equal in truth tables?

    e.g., DeMorgan's laws:
    ¬(p ∨ q) is equivalent to ¬p ∧ ¬q

we did a truth table for both and showed the same set of truth
assignments made both true


--> how do we do it with proofs?

would have to do the proof in both directions
first one as premise other as conclusion
then the other way





////////////////////////////////

Example: prove one of the distributive laws

p ∨ (q ∧ r)     is equivalent to       (p ∨ q) ∧ (p ∨ r)


(orDist.logika)


///////////////////////////////

Equivalence in if-statements.


NOTE: there was a mistake in this example during lecture.
It has been corrected below.


Consider this if-statement:

if (grade >= 80 || extraCredit == true) {
    if (grade <= 90 || extraCredit == true) {
        //do stuff
    }
}


--> translate to propositional logic
    (what does this look like?)

p: grade >= 80
q: extraCredit == true
r: grade <= 90

(p V q) ^ (r V q)

equivalent to: q V (p ^ r)


--> what is an equivalent, simpler if-statement?

if (extraCredit == true || (grade >= 80 && grade <= 90))


///////////////////////////////////

Next set of deduction rules: implies operator

/////////////////////////////////////

Implies-elimination, →e

      P, P → Q
→e: -----------
        Q



English example:

If it is hot, then I will go swimming.
It is hot.

Conclusion? we will go swimming


--> how would this look in a truth table?
    (what is always the case when P and P → Q are both true?)


///////////////////////////////////////

Syntax for using →e:

a. P                (some justification)
b. P → Q            (some justification)
c. Q                →e b a



////////////////////////////////////////

Example (implies1.logika):

(p ∧ q) → r,  p → q,  p  ⊢ r



Example (implies2.logika):

p → r,  q → r,  p ∨ q  ⊢ r


//////////////////////////////////////

(stopped here - will continue on Tuesday)

/////////////////////////////////////

Implies-introduction, →i

      {P assume
      ... Q}
→i: -----------
      P → Q


Idea: if Q is true whenever P is, then we can promise that
    if P is true, then Q is too.

This is the relationship P → Q.




////////////////////////////////////////

Syntax for using →i:

a. {
    b. P            assume
    ...
    c. Q            (some justification
}
d. P → Q            →i a

///////////////////////////////////////

Example (implies3.logika):

p → r,  q → r  ⊢  (p ∧ q) → r




////////////////////////////////////////

Next time:

- More with implies rules
- Review for Exam 1