
// This was our code for absolute value
// modify it to be in a function

//We skipped this problem -- I recommend you do it on your own

import org.sireum.logika._

def absVal(numOrig: Z) : Z = {
    //what do we need here?

    var num: Z = numOrig

    //update num to be the absolute value of the input
    if (num < 0) {
        num = num * -1

        l"""{
            1. num_old < 0              premise //if condition true
            2. num == num_old * -1      premise //assignment
            3. num_old == numOrig       premise //from previous assignment
            4. num >= 0                 algebra 1 2
            5. num == -numOrig          algebra 3 2
        }"""

    } else {

        //do nothing -- num is already its own absolute value

        l"""{
            1. !(num < 0)           premise //condition is false
            2. num >= 0             algebra 1
            3. num == numOrig       premise //hasn't changed
        }"""
    }

    //these were our old asserts
    assert(num >= 0)
    assert(num == numOrig | num == -numOrig)

    return num
}

//do the verification

////////////////// Test code //////////////

val x: Z = 4

//use function to get absolute value of x
//what *should* the absolute value be?