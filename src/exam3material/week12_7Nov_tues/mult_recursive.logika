import org.sireum.logika._

//want to return x * y, through repeated addition
//recursively compute x + x + ... + x (y times)
def mult(x: Z, y: Z): Z = {
    //what goes here?
    l"""{
        requires y >= 0
        ensures result == x*y
    }"""

    //we want answer to hold our calculation
    var answer: Z = 0

    //what is the base case?
    if (y == 0) {
        answer = 0

        l"""{
            1. y == 0           premise //if is true
            2. answer == 0      premise //from the assignment
            3. answer == x*y    algebra 1 2 //proves postcondition for if
        }"""

    } else {
        //prove the precondition
        l"""{
            1. !(y == 0)        premise //if is false
            2. y >= 0           premise //from precondition
            3. y >= 1           algebra 1 2
            4. y-1 >= 0         algebra 3
            //need: y-1 >= 0 for the precondition
        }"""

        var temp: Z = mult(x, y-1)
        answer = x + temp

        l"""{
            1. answer == x + temp       premise //from assignment
            2. temp == x*(y-1)          premise //from the postcondition
                                                //of the recursive call
            3. temp == x*y - x          algebra 2
            4. answer == x + x*y - x    algebra 1 3
            5. answer == x*y            algebra 4
        }"""

        //need: answer == x*y
    }

    l"""{
        1. answer == x*y                premise //true in both branches
                    //proves the postcondition
    }"""

    //what is the recursive case?
    //answer == x*y (need to prove this in both branches)

    return answer
}

////////////// Test code //////////////

val a: Z = 5
val b: Z = 4

l"""{
    1. b == 4           premise
    2. b >= 0           algebra 1 //proves precondition
}"""

var ans: Z = mult(a, b)

l"""{
    1. a == 5           premise
    2. b == 4           premise
    3. ans == a*b       premise //from postcondition
    4. ans == 20        algebra 1 2 3
}"""

//what do we want to assert that it is?
assert(ans == 20)