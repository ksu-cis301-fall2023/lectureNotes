HW 9 is due tonight

#6 may hang - try to create OR statements outside
    nested conditionals

HW 10 will be posted later today


Exam 3 is Thursday, November 16

//////////////////////////////////

Today:
- verification with nested conditionals
- verifying programs with functions

//////////////////////////////////

Verify programs with nested conditionals.

Max of 3 numbers

-- see code

-- in each branch, what do we know about max?

-- finish verification

//////////////////////////////////

Function contracts - just under function definition:

l"""{
    requires (precondition)
    ensures (postcondition)
}"""


Requires/precondition:
- any assumptions we need to make about the parameters
- user must prove these requirements BEFORE calling the function
- list preconditions as PREMISES in first logic block in function
- can have several preconditions -- put on the next lines, tabbed over


///

Ensures/postcondition:
- describes what the function returns
    - use "result" to mean return value

- user can use a postcondition as a PREMISE in a logic block
    after calling the function

- can have several postconditions -- put on the next lines, tabbed over


/////////////////////////////////

Example: plusOne.logika


Write function contract for plusOne

Prove the postcondition for plusOne

Validate the assert after calling plusOne




/////////////////////////////////

Example: tickets.logika
- find the total cost of tickets based on adult/child numbers
- each adult ticket is $50, and each child ticket is $30

- what do we need as preconditions?
- what should be the postcondition?

--> finish verification




//////////////////////////////////

Four steps:

1) What should be done before calling the function?

    suppose a precondition is: x < 0 | x > 10
    and we do:
        function(4-2)

    --> what would we need to do before the function call?




2) What can the function itself do with the preconditions?




3) What must the function do with the postconditions?

    if a postcondition is: result > 0

    and we have:

        return answer-y

    what do we have to prove before returning?





4) What can the calling code do with the postcondition after
    the function returns?

    x = function(y+7)



maybe a postcondition is (num is the param): result > num

What can we claim?





/////////////////////////////////

Example: put our abs code in a function (absFn.logika)




/////////////////////////////////

Recursive functions

- exactly the same idea

 --> recursive call should go on its own line, like:
        total = recursiveCall(params)

    NOT combined with an expression:
        total = total + recursiveCall(params)


    Must do something like this instead:
        temp = recursiveCall(params)
        total = total + temp


Before making a recursive call, what do we have to do?



After returning from the recursive call, what *can* we do?




/////////////////////////////////

Example (mult_recursive.logika):

- multiplication through repeated (recursive) addition
- write function contract
- do verification

/////////////////////////////

Next time:
- verifying functions with loops