
// This was our code for absolute value,
// modified to be in a function

import org.sireum.logika._

def absVal(numOrig: Z) : Z = {
    l"""{
        ensures result >= 0
            result == numOrig V result == -numOrig
    }"""

    var num: Z = numOrig

    //update num to be the absolute value of the input
    if (num < 0) {
        num = num * -1

        l"""{
            1. num_old < 0              premise //if condition true
            2. num == num_old * -1      premise //assignment
            3. num_old == numOrig       premise //from previous assignment
            4. num >= 0                 algebra 1 2
            5. num == -numOrig          algebra 3 2
        }"""

    } else {

        //do nothing -- num is already its own absolute value

        l"""{
            1. !(num < 0)           premise //condition is false
            2. num >= 0             algebra 1
            3. num == numOrig       premise //hasn't changed
        }"""
    }

    l"""{
        1. num >= 0                         premise //true in both branches
        2. num == -numOrig V num == numOrig premise //LHS if, RHS else
        3. {
            4. num == -numOrig                      assume
            5. num == numOrig V num == -numOrig     Vi2 4
        }
        6. {
            7. num == numOrig                       assume
            8. num == numOrig V num == -numOrig     Vi1 7
        }
        9. num == numOrig V num == -numOrig         Ve 2 3 6
    }"""

    return num
}

//do the verification

////////////////// Test code //////////////

val x: Z = -4

val pos: Z = absVal(x)

//how can we prove this assert?

assert(pos == 4)