Final exam: Friday, December 15 2:00-3:50 pm
    --> posted repo of practice problems
    --> will review on Thursday, December 7


HW 11 (last assignment) due tonight
    - don't worry about warnings that asserts are always true

Fan behavior:
    - has speed (0-5), isOn (T/F), rotateOn (T/F)
    - can only change speed one level at a time
    - fan can only rotate at speed 3 or higher
    - changing speed CAN turn the fan on
    - changing the speed CANNOT turn the rotate off

Current state: fan on, speed 3, rotate on. Can we call setSpeed(2)?
    NO!

Current state: fan off, speed 0, rotate off. Can we call setSpeed(1)?
    yes (and you need to set the fan to on)

Current state: fan on, speed 2, rotate off. Can we call setSpeed(0)?
    NO! (can't jump speeds)


Remaining graded categories for the semester:
- HW 11
- final exam
- "midterm equivalent from final"

///////////////////////////////////////

Today:

- Finish Account class
- Best practices for specifications outside this class
- Termination
- The Halting problem
- Using a verification tool on our JML specifications


///////////////////////////////////////

Account class - write deposit method

//////////////////////////////////////

Best practices outside class

Clock
minutes, seconds, hours, AM/PM

tick()


Highly recommend:
- write global invariants for any class with fields/properties
- think about whether any parameters would violate global invariants
    --> and if so, don't allow them!
- consider the global invariants as you write the methods


- don't need to use JML - but try to write your invariants/specifications
    in a clear, unambiguous way

- write (unambiguous, not necessarily JML) preconditions and postconditions
    for all methods

- throw exceptions in a method where your preconditions aren't met



Next level:
- add asserts at the end of methods that modify fields/properties
    to make sure your global invariants aren't violated

- add asserts at the end of methods that are destined for a
    reusable library to make sure you are fulfilling the postcondition
    (use as a development tool)


--> be careful with documentation


//////////////////////////////////////

Content of CIS 575.


If you want to prove correctness of an algorithm or function, need:

   - function contract (preconditions and postconditions)
   - loop invariant for any loops
        - loop invariant should describe progress loop has made so far
        - should bound the loop counter
        - should describe measure of work (for termination)

The process of proving correctness of a non-Logika algorithm or function
is EXACTLY the same approach we used in Logika.


--> What approach is that?
    to prove the postcondition

    we would know all loop invariants held at the end of the loop
    !(loop condition)
    use those pieces to prove the postcondition



/////////////////////////////////////

Termination - whether a program will finish on all inputs


Partial Correctness:
    if the precondition is satisfied
    we guarantee the postcondition as long as the program terminates


Total Correctness:
    if the precondition is satisfied
    we guarantee the postcondition AND termination


We need to show termination to achieve total correctness


////////////////////////////////////////

Termination with a loop.
    - create measure of how much work is left
        (i.e., how many iterations are left)
    - show that the measure DECREASES with each iteration
    - show that if there is no more work to do, then the loop has finished
    - see example


Termination with recursion.
    - use induction
    ...what does this mean about our preconditions?
    - see example



Collatz function.



////////////////////////////////////////

Decidability - whether a problem can be decided one way or another

Halting problem - given a computer program and a set of inputs
    can you write another program to determine if the original
    program will halt for the inputs?


Proof by contradiction! Suppose, for the sake of contradiction, that
we have Halt:

//Idea: Pretend Halt takes Function, Input.
//Returns whether Function terminates on Input.

def Halt(Function, Input):
    if Function(Input) halts: return true
    else return false

///

def DoOpposite(Function):
    if (Halt(Function, Function)) loop forever
    else exit

///

What if we do: DoOpposite(DoOpposite)?

    Case 1: suppose DoOpposite(DoOpposite) loops forever.
        Then Halt(DoOpposite, DoOpposite) returned true.
        Then DoOpposite(DoOpposite) halts. Contradiction.

     Case 2. Suppose DoOpposite(DoOpposite) halts. Then
        Halt(DoOpposite, DoOpposite) must have returned false.
        Then DoOpposite(DoOpposite) doesn't halt. Contradiction.

Both cases have contradiction, so our assumption was wrong. Halt
can't exist.

//////////////////////////////////

Using OpenJML

- can verify total correctness if you:
    - provide function contracts
    - for loops, provide loop invariants and termination measure


--> see examples

--> see online tutorial/documentation


/////////////////////////////////////


Next time:

- review for final exam