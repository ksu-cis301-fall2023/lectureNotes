HW 11 (last assignment) will be posted after class
    - due Tuesday, December 5

Final exam: Friday, December 15 2:00-3:50 pm
    (sorry...)

Remaining graded categories for the semester:
- HW 11
- final exam
- "midterm equivalent from final"

///////////////////////////

Exam 3 discussion.

High: 100/100
Average: 72/100 (includes 0s for several students who didn't take exam)

A (90-100): 25 students
B (80-89): 14 students
C (70-79): 8 students
D (60-69): 13 students
F (below 60): 21 students (includes 0s for students who didn't take it)


Discuss some exam problems.



///////////////////////////

Today:

- Design by contract
- Transition to other languages (Java)
- Formal specifications with and without verification
- Enforcing preconditions and checking postconditions
- Intro to JML (Java Modeling Language)
- Specifications for arrays
- Writing asserts
- Writing unit tests (JUnit)

///////////////////////////

Design by contract

When is this useful? When is it less useful?



///////////////////////////

Formal verification options in other languages



binary search bug

    int mid = (low+high)/2;


--> what's the problem?


    - in C++ for 20 years
    - in Java's original binary search
    - finally fixed in 2006


--> how to fix?


Timsort bug (Java's Collections sort / Arrays.sort / Python's sort)
    - developed in 2002
    - breaks array into series of runs that are separately sorted and merged


--> bug discovered when researchers tried to use formal verification
    to prove correctness in 2015...and were unsuccessful

--> would crash in certain cases when the run lengths become smaller
    than expected


http://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/



///////////////////////////

Complete formal verification is not practical in many cases

Halfway option

- Write a formal specification (avoids ambiguity) that *could* be used
    with a verification tool
- Enforce preconditions
- Check postconditions
- (Check invariants)


//////////////////////////

Java Modeling Language (JML)

(background)

See jmlSyntax.txt for a primer


Whose job is it to check preconditions?


What should a function do if its preconditions are not met?
    - return a dummy value?




How to enforce postconditions?



--> why might this would be preferable to only using test cases?



/////////////////////////////

IntelliJML - does JML syntax highlighting

https://gitlab.utwente.nl/fmt/intellijml/-/commit/76e818ab449775ab93e4d14b460b1cf8580ea406

Download the IntelliJ-1.1.5.jar file

In IntelliJ, File->Settings->Plugins, click the gear, select
    "Load Plugin from Disk", find the jar file



/////////////////////////////

JMLExample.java


- add our function contract checks

- do full contract + checks on mult example


////////////////////////////

JUnit tests

- what are they for?

- how to generate a test file for a class

- how to add necessary libraries


////////////////////////////

Types of asserts in JUnit tests:


Basic assert for checking an expected value after a method call:

assertEquals((expected value), (test expression));

--> can include message as an optional last parameter


///

Assert that a method is throwing an exception
(to test enforcement of preconditions):

assertThrows(IllegalArgumentException.class,
                () -> {
                    methodCall(params);
                }, "should get exception if ...explain");



///

Assert that two arrays have the same values:


assertArrayEquals(firstArray, secondArray);
assertArrayEquals(new int[] {10,1,2,3,4,5,6,7,8,9}, test);

--> Can include message as an optional parameter


///////////////////////////////////////

Example: Write unit tests for each of our methods


///////////////////////////////////////

Example: Write a method that returns an array that is a
    copy of another array

--> specification?

--> write test method

///////////////////////////////////////

Example: Write a method that returns the min element in an array

--> specification?

--> write test method


///////////////////////////////////////

Example: write a method that updates each array element to be its
own absolute value

--> specification?

--> write test method

///////////////////////////////////////

Next time:

- writing our own function contracts in JML
- more with arrays
- global invariants